using System;
using Microsoft.Xna.Framework;

namespace Farbase
{
    public class InterfaceEventHandler : fbEventHandler
    {
        private fbInterface ui;

        public InterfaceEventHandler(fbGame game, fbInterface ui)
            : base(game)
        {
            Game = game;
            this.ui = ui;
        }

        public override void Handle(Event e)
        {
            switch (e.GetEventType())
            {
                case EventType.NameEvent:
                    NameEvent ne = (NameEvent)e;
                    Game.Log.Add(
                        string.Format(
                            "{0}<{2}> is now known as {1}<{2}>.",
                            Game.World.GetPlayer(ne.ID).Name,
                            ne.Name,
                            ne.ID
                        )
                    );
                    break;

                case EventType.BuildUnitEvent:
                    //this should probably not be a thing later,
                    //because unit building units takes time?
                    //(so it'd actually be annoying)
                    //but right now it's instant and you probably want it
                    //selected asap

                    BuildUnitEvent bue = (BuildUnitEvent)e;
                    Vector2i selected = ui.Selection.GetSelection();

                    //reselect, so our tile selection -> unit selection
                    //still clunky, but it's what we go with for now
                    if (bue.x == selected.X && bue.y == selected.Y)
                        ui.Select(new Vector2i(bue.x, bue.y));
                    break;

                default:
                    throw new ArgumentException();
            }
        }

        public override void Push(Event e)
        {
            ui.Engine.QueueEvent(e);
        }
    }

    public class ServerGameEventHandler : fbEventHandler
    {
        private GameEventHandler fallthrough;

        public ServerGameEventHandler(fbGame game)
            : base(game)
        {
            fallthrough = new GameEventHandler(game, null);
        }

        public override void Handle(Event e)
        {
            switch (e.GetEventType())
            {
                case EventType.NameEvent:
                    fallthrough.Handle(e);
                    break;

                case EventType.UnitMoveEvent:
                    UnitMoveEvent ume = (UnitMoveEvent)e;
                    Unit u = Game.World.UnitLookup[ume.ID];
                    u.MoveTo(ume.x, ume.y);
                    break;

                    //normal game event handler also handles build station
                    //but that's an event generated by the interface,
                    //which we don't have server side, obv,
                    //so we don't have to bother with that.

                case EventType.CreateUnitEvent:
                    fallthrough.Handle(e);
                    break;

                case EventType.PlayerDisconnect:
                    PlayerDisconnectEvent pde = (PlayerDisconnectEvent)e;

                    lock (Game.World.Players)
                    {
                        Game.World.RemovePlayer(pde.id);
                    }
                    break;

                default:
                    throw new ArgumentException();
            }
        }

        public override void Push(Event e)
        {
            Handle(e);
        }
    }

    public class GameEventHandler : fbEventHandler
    {
        private fbEngine engine;

        public GameEventHandler(fbGame fbGame, fbEngine engine)
            : base(fbGame)
        {
            this.engine = engine;
        }

        public override void Handle(Event e)
        {
            switch (e.GetEventType())
            {
                case EventType.NameEvent:
                    NameEvent ne = (NameEvent)e;
                    Game.World.GetPlayer(ne.ID).Name = ne.Name;
                    Game.World.GetPlayer(ne.ID).Color = ne.Color;
                    break;

                case EventType.UnitMoveEvent:
                    UnitMoveEvent ume = (UnitMoveEvent)e;
                    Unit u = Game.World.UnitLookup[ume.ID];

                    u.GetAnimateable().AddAnimation(
                        new PositionAnimation(
                            100,
                            CurveType.EaseOut,
                            u.fPosition,
                            new Vector2(ume.x, ume.y)
                        )
                    );

                    u.MoveTo(ume.x, ume.y);
                    break;

                case EventType.BuildStationEvent:
                    BuildStationEvent bse = (BuildStationEvent)e;
                    engine.NetClient.Send(
                        new NetMessage3(
                            NM3MessageType.station_create,
                            bse.Owner,
                            bse.x,
                            bse.y
                        )
                    );
                    break;

                case EventType.BuildUnitEvent:
                    BuildUnitEvent bue = (BuildUnitEvent)e;
                    engine.NetClient.Send(
                        new NetMessage3(
                            NM3MessageType.unit_build,
                            bue.UnitType,
                            bue.x,
                            bue.y
                        )
                    );
                    break;

                case EventType.CreateUnitEvent:
                    CreateUnitEvent cue = (CreateUnitEvent)e;
                    Game.World.SpawnUnit(
                        new Unit(
                            Game.World,
                            cue.UnitType,
                            cue.Owner,
                            cue.ID,
                            cue.x,
                            cue.y
                        )
                    );
                    break;

                case EventType.PlayerDisconnect:
                    PlayerDisconnectEvent pde = (PlayerDisconnectEvent)e;
                    Game.Log.Add(
                        string.Format(
                            "{0} disconnected.",
                            Game.World.GetPlayer(pde.id).Name
                        )
                    );

                    Game.World.RemovePlayer(pde.id);
                    break;

                default:
                    throw new ArgumentException();
            }
        }

        public override void Push(Event e)
        {
            engine.QueueEvent(e);
        }
    }

    public abstract class fbEventHandler
    {
        protected fbGame Game;

        protected fbEventHandler(fbGame game)
        {
            Game = game;
        }

        public abstract void Handle(Event e);
        public abstract void Push(Event e);
    }
}