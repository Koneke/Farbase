using System;
using Microsoft.Xna.Framework;

namespace Farbase
{
    public class InterfaceEventHandler : fbEventHandler
    {
        private fbInterface ui;

        public InterfaceEventHandler(fbGame game, fbInterface ui)
            : base(game)
        {
            Game = game;
            this.ui = ui;
        }

        public override void Handle(Event e)
        {
            switch (e.GetEventType())
            {
                case EventType.NameEvent:
                    NameEvent ne = (NameEvent)e;
                    Game.Log.Add(
                        string.Format(
                            "{0}<{2}> is now known as {1}<{2}>.",
                            Game.World.GetPlayer(ne.ID).Name,
                            ne.Name,
                            ne.ID
                        )
                    );
                    break;

                case EventType.BuildUnitEvent:
                    //this should probably not be a thing later,
                    //because unit building units takes time?
                    //(so it'd actually be annoying)
                    //but right now it's instant and you probably want it
                    //selected asap

                    BuildUnitEvent bue = (BuildUnitEvent)e;

                    if (ui.Selection == null)
                        break;

                    Vector2i selected = ui.Selection.GetSelection();

                    //reselect, so our tile selection -> unit selection
                    //still clunky, but it's what we go with for now
                    if (bue.x == selected.X && bue.y == selected.Y)
                        ui.Select(new Vector2i(bue.x, bue.y));
                    break;

                default:
                    throw new ArgumentException();
            }
        }

        public override void Push(Event e)
        {
            ui.Engine.Push(e);
        }
    }

    public class ServerGameEventHandler : fbEventHandler
    {
        private GameEventHandler fallthrough;

        public ServerGameEventHandler(fbGame game)
            : base(game)
        {
            fallthrough = new GameEventHandler(game, null);
        }

        public override void Handle(Event e)
        {
            switch (e.GetEventType())
            {
                case EventType.NameEvent:
                    fallthrough.Handle(e);
                    break;

                case EventType.UnitMoveEvent:
                    UnitMoveEvent ume = (UnitMoveEvent)e;
                    Unit u = Game.World.Units[ume.ID];
                    u.MoveTo(ume.x, ume.y);
                    break;

                    //normal game event handler also handles build station
                    //but that's an event generated by the interface,
                    //which we don't have server side, obv,
                    //so we don't have to bother with that.

                case EventType.CreateUnitEvent:
                    fallthrough.Handle(e);
                    break;

                case EventType.PlayerDisconnect:
                    PlayerDisconnectEvent pde = (PlayerDisconnectEvent)e;

                    lock (Game.World.Players)
                    {
                        Game.World.RemovePlayer(pde.id);
                    }
                    break;

                case EventType.ProjectFinishedEvent:
                    fallthrough.Handle(e);
                    break;

                default:
                    throw new ArgumentException();
            }
        }

        public override void Push(Event e)
        {
            Handle(e);
        }
    }

    public class GameEventHandler : fbEventHandler
    {
        private fbEngine engine;

        public GameEventHandler(fbGame fbGame, fbEngine engine)
            : base(fbGame)
        {
            this.engine = engine;
        }

        public override void Handle(Event e)
        {
            Station s;
            switch (e.GetEventType())
            {
                case EventType.NameEvent:
                    NameEvent ne = (NameEvent)e;
                    Game.World.GetPlayer(ne.ID).Name = ne.Name;
                    Game.World.GetPlayer(ne.ID).Color = ne.Color;
                    break;

                case EventType.UnitMoveEvent:
                    UnitMoveEvent ume = (UnitMoveEvent)e;
                    Unit u = Game.World.Units[ume.ID];

                    u.GetAnimateable().AddAnimation(
                        new PositionAnimation(
                            100,
                            CurveType.EaseOut,
                            u.fPosition,
                            new Vector2(ume.x, ume.y)
                        )
                    );

                    u.MoveTo(ume.x, ume.y);
                    break;

                case EventType.BuildStationEvent:
                    BuildStationEvent bse = (BuildStationEvent)e;
                    engine.NetClient.Send(
                        new NetMessage3(
                            NM3MessageType.station_create,
                            bse.Owner, //isn't this always us?
                                       //oh, right, but since the same message
                                       //is used server -> client,
                                       //it provides owner as well.
                            -1, //client doesn't give id, handled serverside
                            bse.x,
                            bse.y
                        )
                    );
                    break;

                case EventType.BuildUnitEvent:
                    BuildUnitEvent bue = (BuildUnitEvent)e;
                    engine.NetClient.Send(
                        new NetMessage3(
                            NM3MessageType.unit_build,
                            (int)bue.UnitType,
                            bue.x,
                            bue.y
                        )
                    );
                    break;

                case EventType.CreateUnitEvent:
                    CreateUnitEvent cue = (CreateUnitEvent)e;
                    Game.World.SpawnUnit(
                        new Unit(
                            Game.World,
                            cue.UnitType,
                            cue.Owner,
                            cue.ID,
                            cue.x,
                            cue.y
                        )
                    );
                    break;

                case EventType.PlayerDisconnect:
                    PlayerDisconnectEvent pde = (PlayerDisconnectEvent)e;
                    Game.Log.Add(
                        string.Format(
                            "{0} disconnected.",
                            Game.World.GetPlayer(pde.id).Name
                        )
                    );

                    Game.World.RemovePlayer(pde.id);
                    break;

                case EventType.SetProjectEvent:
                    SetProjectEvent spe = (SetProjectEvent)e;

                    s = Game.World.Stations[spe.Station];

                    switch (spe.ProjectType)
                    {
                        case ProjectType.UnitProject:
                            UnitType type = UnitType.GetType(
                                (UnitTypes)spe.Project
                            );

                            Game.World.Players[spe.Owner].Money -=
                                type.Cost;

                            engine.NetClient.Send(
                                new NetMessage3(
                                    NM3MessageType.station_set_project,
                                    spe.Owner,
                                    s.ID,
                                    type.ConstructionTime,
                                    (int)ProjectType.UnitProject,
                                    spe.Project
                                )
                            );
                            break;

                        default:
                            throw new ArgumentException();
                    }
                    break;

                case EventType.ProjectFinishedEvent:
                    ProjectFinishedEvent pfe = (ProjectFinishedEvent)e;
                    Project p = pfe.Project;
                    switch (p.GetProjectType())
                    {
                        case ProjectType.UnitProject:
                            //this is a bit hacky, but we specifically only
                            //want to send this netmessage from the client
                            //*OWNING* the project, whereas with techprojects
                            //we can handle them just fine on our own side.
                            //this is because we need to keep our unit ids
                            //synchronized.
                            if (p.Station.Tile.Unit == null)
                            {
                                if (
                                    Game.LocalPlayer != null && //not serverside
                                    p.Owner == Game.LocalPlayer.ID //and our
                                ) {
                                    Push(
                                        new BuildUnitEvent(
                                            (UnitTypes)p.GetProject(),
                                            p.Owner,
                                            p.Station.Position.X,
                                            p.Station.Position.Y
                                        )
                                    );
                                }

                                p.SetFinished();
                            }
                            break;

                        case ProjectType.TechProject:
                            Game.World.Players[p.Owner].Tech.Add(
                                (TechID)p.GetProject()
                            );

                            p.SetFinished();
                            break;

                        default:
                            throw new ArgumentException();
                    }
                    break;

                default:
                    throw new ArgumentException();
            }
        }

        public override void Push(Event e)
        {
            engine.Push(e);
        }
    }

    public abstract class fbEventHandler
    {
        protected fbGame Game;

        protected fbEventHandler(fbGame game)
        {
            Game = game;
        }

        public abstract void Handle(Event e);
        public abstract void Push(Event e);
    }
}